A : Creating Words
Code :

#include <iostream>
#include <string>
using namespace std;
 
int main() {
    int t;
    cin >> t;
 
    // Process each test case
    for (int i = 0; i < t; ++i) {
        string a, b;
        cin >> a >> b;
        
        // Swap the first characters
        char temp = a[0];
        a[0] = b[0];
        b[0] = temp;
 
        // Output the result
        cout << a << " " << b << endl;
    }
 
    return 0;
}


B : Maximum Multiple Sum
Code :


#include <iostream>
#include <vector>
 
using namespace std;
 
// Function to calculate the sum of multiples of x that are <= n
int sumOfMultiples(int x, int n) {
    int k = n / x;
    return x * k * (k + 1) / 2;
}
 
int main() {
    int t;
    cin >> t;
    vector<int> results;
    
    while (t--) {
        int n;
        cin >> n;
        int maxSum = 0;
        int optimalX = 2;
        
        // Check all possible values of x from 2 to n
        for (int x = 2; x <= n; ++x) {
            int currentSum = sumOfMultiples(x, n);
            if (currentSum > maxSum) {
                maxSum = currentSum;
                optimalX = x;
            }
        }
        
        results.push_back(optimalX);
    }
    
    // Output all results
    for (int result : results) {
        cout << result << endl;
    }
    
    return 0;
}

C : Good Prefixes
Code : 

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
 
// Function to count good prefixes for a given array
int count_good_prefixes(vector<int>& array) {
    int n = array.size();
    int max_prefix_sum = 0;
    long long sum = 0;
    int good_prefixes = 0;
 
    // Iterate through the array
    for (int i = 0; i < n; i++) {
        sum += array[i];
        max_prefix_sum = max(max_prefix_sum, array[i]);
        
        // Check if the prefix is good
        if (max_prefix_sum * 2 == sum) {
            good_prefixes++;
        }
    }
    
    return good_prefixes;
}
 
// Main function
int main() {
    int t;
    cin >> t; // Number of test cases
    
    // Iterate through each test case
    while (t--) {
        int n;
        cin >> n; // Number of elements in the array
        vector<int> array(n);
        
        // Input array elements
        for (int i = 0; i < n; i++) {
            cin >> array[i];
        }
        
        // Count good prefixes for the current array and print the result
        cout << count_good_prefixes(array) << endl;
    }
 
    return 0;
}
